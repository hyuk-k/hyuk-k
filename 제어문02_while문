{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"제어문02_while문","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPJ7snjTBRtRz9IIXj5Xr18"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"NbB8mgej-6qR"},"source":["# 조건에 따라 반복하는 while 문\n","## 조건에 따라 반복하는 while 문\n","- 반복 수행을 할 수 있는 또 다른 방법은 while 문을 이용하는 것\n","- while 문은 조건에 따라 반복 여부를 결정\n","- 반복 범위가 정해진 반복을 수행할 경우에는 for문을 주로 이용\n","- 반복 범위 없이 조건에 따라서 반복 수행 여부를 결정하는 경우에는 while 문을 주로 이용\n","\n","## while 문의 구조\n","- while <조건문>:\n","        <코드 블록>\n","- while 문에서 <조건문>을 만족하면 <코드 블록>을 계속 수행하고\n","- <조건문>을 만족하지 않으면 <코드 블록>을 실행하지 않고 while 문을 빠져나오게 됨\n","- <조건문> 다음에는 콜론(:)을 쓰고 <코드 블록>은 들여쓰기\n","- 변수 i와 sum을 0으로 초기화\n","- 그 후에 while 문에서 sum이 20보다 작을 경우만 <코드 블록>을 반복해서 수행\n","- <코드 블록>에서는 변수 i를 증가하고 이전의 sum과 현재의 i를 더하고 변수 i와 sum을 출력\n","- sum이 20 이상이 되면 while 문을 빠져나오게 "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UrZpF0SK_b8W","executionInfo":{"status":"ok","timestamp":1627574484947,"user_tz":-540,"elapsed":5,"user":{"displayName":"이강혁","photoUrl":"","userId":"09034255972811267730"}},"outputId":"0ea01d81-ed72-425a-caf9-7163a86d6afa"},"source":["i = 0 #초기화\n","sum = 0 #초기화\n","\n","print (\"i sum\")\n","while (sum<20) : # 조건 검사\n","    i = i+1      # i를 1씩 증가\n","    sum = sum+i  # 이전의 sum과 현재 i를 더해서 sum을 갱신\n","    print(i,sum) # i와 sum 출력"],"execution_count":1,"outputs":[{"output_type":"stream","text":["i sum\n","1 1\n","2 3\n","3 6\n","4 10\n","5 15\n","6 21\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"gkNhj-g7AB9N"},"source":["- sum이 21로 20이상이 되자 while 문의 <코드 블록>을 실행하지 않고 while문을 빠져나왔음\n","\n","## 무한 반복 while 문\n","- while 문을 조건이 만족하는 경우에만 수행\n","- 어떤 경우에는 코드 블록을 무조건 계속 반복하라고 명령을 내려야 할 떄가 있음\n","\n","- while True :\n","    - while 문에서 <조건문>이 항상 참이므로 코드 블록을 무조건 수행\n","- while True :\n","\n","     print(\"while test\")\n","    - while 문에서 <조건문>이 항상 참일 경우 <코드 블록>에 있는 코드가 문한 반복하므로 주의 필요\n","\n","# 반복문을 제어하는 break와 continue\n","\n","## 반복문을 제어하는 break와 continue\n","- for문에서는 <반복 범위> 동안, while 문에서는 <조건문>을 만쪽할 때 까지 계속해서 <코드 블록>의 코드를 실행\n","- 반복문이 수행되고 있는 동안에 특정 조건을 만족하는 경우 반복을 멈추고 <코드 블록>을 빠져나오거나 다음 반복을 수행하게 하려면 **break와 continue를 이용**\n","\n","## 반복문을 빠져나오는 break\n","- 반복문 (for문 혹은 while문) 안에서 break 를 만나게 되면 반복문을 빠져나옴\n","- <코드 블록>의 구조에 따라 <코드 블록 1> 이나 <코드 블록 2>는 없을 수 있음\n","- break를 이용해 while문을 빠져나옴"]},{"cell_type":"code","metadata":{"id":"ELKCDJwREIJT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627575104862,"user_tz":-540,"elapsed":375,"user":{"displayName":"이강혁","photoUrl":"","userId":"09034255972811267730"}},"outputId":"3ae580b2-8e19-4d21-8b2a-a0e46479bbe4"},"source":["k=0\n","while True :\n","  k = k+1   # k는 1씩 증가\n","\n","  if(k>3) : # k가 3보다 크면\n","   break    # break로 while 문을 빠져나옴\n","\n","  print(k)  # k 출력"],"execution_count":3,"outputs":[{"output_type":"stream","text":["1\n","2\n","3\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6JldjfZg2-KI"},"source":["    - while 다음에 True 조건이 있으므로 <코드 블록>을 게속 반복\n","    - <코드 블록>에서는 k가 4가 되면 지정한 조건 ('if(k>3)')을 만족해서 break 명령을 수행해 while 문을 빠져나옴\n","    - 출력결과에 3까지만 출력되고 그 이후는 출력되지 않음\n","\n","- for 문에서 break를 이용한 코드"]},{"cell_type":"code","metadata":{"id":"hVn7i3yGCTH2","executionInfo":{"status":"ok","timestamp":1627606397034,"user_tz":-540,"elapsed":238,"user":{"displayName":"이강혁","photoUrl":"","userId":"09034255972811267730"}}},"source":["for k in range(10) :\n","  if(k > 2) :            # k가 2보다 크면\n","   break               # break로 for 문을 빠져나옴\n","\n","   print(k)            # k 출력"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yd9_5PjX3yLu"},"source":["- k가 3이 되면 지정한 조건(if(k>2))을 만족해서 break 명령을 수행해 반복문을 빠져나옴\n","- break 명령어를 이용하면 특정 조건을 만족할 때 반복문을 멈추게 할 수 있음\n","\n","## 다음 반복을 실행하는 continue\n","- 반복문 안에서 continue를 만나면 반복문의 처음으로 돌아가서 다음 반복을 진행"]},{"cell_type":"code","metadata":{"id":"BDGSo1-63xat","executionInfo":{"status":"ok","timestamp":1627606383887,"user_tz":-540,"elapsed":260,"user":{"displayName":"이강혁","photoUrl":"","userId":"09034255972811267730"}}},"source":["for k in range(5) :\n","  if(k == 2) :\n","    continue\n","\n","    print(k)"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"G6czjEYW5zbf"},"source":["    - for 문을 이용해 <반복 범위> ({0,1,2,3,4}) 만큼 <코드 블록>을 실행\n","    - 그러다 k가 2일때는 지정 조건 ('if(k==2)')을 만족해 continue가 실행돼 반복문의 처음으로 돌아가서 다음 반복을 진행\n","    - continue 다음에 있는 print(k)를 실행하지 않아 출력 결과에 2는 빠짐\n","\n","## whie 문에서 break와 continue를 모두 사용\n","- while 문에서 break와 continue를 모두 사용"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4dx8oux26U6c","executionInfo":{"status":"ok","timestamp":1627606644275,"user_tz":-540,"elapsed":254,"user":{"displayName":"이강혁","photoUrl":"","userId":"09034255972811267730"}},"outputId":"2bca8506-373f-49ee-dbe7-9cae908a2436"},"source":["k=0\n","while True :\n","  k=k+1\n","\n","  if(k == 2) :\n","    print(\"continue next\")\n","    continue\n","  if(k > 4) :\n","    break\n","    \n","  print(k)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["1\n","continue next\n","3\n","4\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_CRW5DYO6prV"},"source":["    - 변수 k가 2일 경우에 continue를 실행\n","    - 반복문에서 continue를 만나면 그 이후의 코드는 실행하지 않고 반복문의 처음으로 가서 바로 다음 반복을 수행\n","    - continue 문 다음에 있는 prin(k)가 수행되지 않아서 2가 출력되지 않음\n","    - k가 3과 4인 경우에는 print(k)가 수행하여 출력되고\n","    - k가 5가되면 지정조건 (if(k>4))을 만족하여 break가 수행되 while 문을 빠져나옴\n","    - 5 이상은 출력되지 않음\n","\n","## 간단하게 반복하는 한 줄 for 문\n","- 파이썬에서는 리스트, 세트, 딕셔너리에서 실행할 수 있는 한 줄 for 문도 지원\n","- 각각 '리스트 컴프리핸션(list comprehension)', '세트 컴프리핸션(set comprehension)','딕셔너리 컴프리핸션(dictionary comprehension)'\n","- 컴프리핸션(comprehension)은 우리말로 내포(혹은 내장)이라는 뜻으로서 리스트, 세트, 딕셔너리 컴프리핸션은 각각 리스트, 세트, 딕셔너리 내에서 코드가 내포돼 실행되는 것을 의미\n","- 컴프리핸션을 잘 이용하면 리스트, 세트, 딕셔너리 데이터를 반복해서 처리해야 할 때 코드를 한 줄로 작성할 수 있어서 편리\n","\n","## 리스트 컴프리해션의 기본 구조\n","- 리스트 컴프리핸션의 기본적인 구조\n","- [<반복 실행문> for <반복변수> in <반복범위>]\n","- for 문에서는 <반복 실행문>이 'for <반복변수> in <반복 범위>:' 다음 줄에 왔는데 한줄 for 문 에서는 <반복 실행문>이 먼저 나옴\n","- 콜론(:)도 이용하지 않음\n","- 예제 : 1~5까지 숫자가 들어있는 리스트에서 각 항목의 숫자를 제곱하려면?"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PF2Kkh-o6ibN","executionInfo":{"status":"ok","timestamp":1627607630548,"user_tz":-540,"elapsed":239,"user":{"displayName":"이강혁","photoUrl":"","userId":"09034255972811267730"}},"outputId":"143900e3-6839-46c4-b973-95050d6752ae"},"source":["numbers = [1,2,3,4,5]\n","square = []\n","\n","for i in numbers :\n","  square.append(i**2)\n","\n","  print(square)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["[1]\n","[1, 4]\n","[1, 4, 9]\n","[1, 4, 9, 16]\n","[1, 4, 9, 16, 25]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qsKN0S-0-cXH"},"source":["- 리스트 컴프리핸션 방법을 이용하면 위의 코드보다 좀 더 간단하게 코드를 작성할 수 있음"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ai2B_2B6-YAU","executionInfo":{"status":"ok","timestamp":1627607707784,"user_tz":-540,"elapsed":244,"user":{"displayName":"이강혁","photoUrl":"","userId":"09034255972811267730"}},"outputId":"1314c71c-a431-434b-9436-abafd1758ae9"},"source":["numbers = [1,2,3,4,5]\n","square = [i**2 for i in numbers]\n","print(square)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["[1, 4, 9, 16, 25]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"E5VS-JP7-1uP"},"source":["## 조건문을 포함한 리스트 컴프리핸션\n","- 리스트 컴프리핸션은 for 문 다음에 if <조건문>을 추가할 수 있음\n","- [<반복 실행문> for <반복변수> in <반복범위> if <조건문>]\n","- 반복문을 수행하다가 if <조건문>을 만족하는 경우에만 <반복 실행문>을 실행\n","- 리스트 컴프리핸션을 이용하지 않고 리스트의 각 항목에서 3이상의 숫자만 제곱하도록 하려면 if문을 포함한 for 문을 작성"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UTOU2zqp-q4p","executionInfo":{"status":"ok","timestamp":1627607953511,"user_tz":-540,"elapsed":237,"user":{"displayName":"이강혁","photoUrl":"","userId":"09034255972811267730"}},"outputId":"249b3915-48e2-4758-a2ad-fb6597e86daf"},"source":["numbers = [1,2,3,4,5]\n","square = []\n","\n","for i in numbers :\n","  if i >= 3 :\n","      square.append(i**2)\n","\n","print(square)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["[9, 16, 25]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Ow4FlNCd_qNg"},"source":["- 조건문을 포함한 리스트 컴프리핸션을 이용해 다시 작성"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8wbjdzw7_m4C","executionInfo":{"status":"ok","timestamp":1627608035357,"user_tz":-540,"elapsed":241,"user":{"displayName":"이강혁","photoUrl":"","userId":"09034255972811267730"}},"outputId":"aa949651-0cc8-4674-941b-e6c2b2b4a323"},"source":["numbers = [1,2,3,4,5]\n","square = [i**2 for i in numbers if i>=3]\n","\n","print(square)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["[9, 16, 25]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ySUdwF4sAA8I"},"source":["- 조건문을 포함한 리스트 컴프리핸션 방법을 이용해 한 줄로 조건에 맞는 리스트의 항목만 제곱하는 코드를 작성"]}]}